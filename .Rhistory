x <- 1
quit()
quit()
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
?sample
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
list.of.packages <- c("xlsx", "stringr", "ggplot2", "lattice", "dplyr", "fitdistrplus")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
?fitdist
NumOfTHigherThan90 = integer(NumberOfWeek),Tshift = integer(NumberOfWeek),
setwd("/home/creatrol/ws/R/WackerProject")
#setwd("/home/creatrol/ws/R/WackerProject")
list.of.packages <- c("xlsx", "stringr", "ggplot2", "lattice", "dplyr", "fitdistrplus", "gtable", "grid")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
failureData <- read.xlsx2("ListV1.XLSX",1)
failureData$Date <- as.Date(as.numeric(as.character(failureData$Created.on)), origin = '1899-12-30')
failureData <- failureData[,! colnames(failureData) %in% c("Created.on")]
startDate <- min(failureData$Date)
failureData$Date <- as.numeric(failureData$Date - startDate)
removeColumns <- c("Long.text.exists","Trigger","Reference.date","Total.planned.costs",
"Trigger.Id","Trigger.Text","Order")
failureData <- failureData[,!colnames(failureData) %in% removeColumns]
# the days from 2008-08-04
#head(failureData)
#str(failureData)
#summary(failureData)
################################## The function ro remove the useless info in "Functional.Location"
shortenLocation <- function(file){
file$Functional.Location <- as.character(file$Functional.Location)
for (i in 1:nrow(file)){
file$Functional.Location[i] <- substr(file$Functional.Location[i],12,
nchar(file$Functional.Location[i]))
}
return(file)
}
################################## The function to extract the"Fuctional.Location"
getlocation <- function(file){
Location <- file$Functional.Location
return(Location)
}
################################## The function to add the group
addGroup <- function(file){
file$Group <- as.character(file$Functional.Location)
for (i in 1:nrow(file)){
file$Group[i] <- substr(file$Group[i],3,6)
}
return(file)
}
################################## The function to extract the "Group"
getGroup <- function(file){
Group <- file$Group
return(Group)
}
failureData <- shortenLocation(failureData)
failureData <- addGroup(failureData)
###################################################### Analyze the frequency of locations (pieces)
Location <- getlocation(failureData)
Location_table <- as.data.frame(table(Location))
Location_table$"Percentage%" <- Location_table$Freq/sum(Location_table$Freq)*100
Location_table <- Location_table[order(-Location_table[,2]),]
###################################################### Analyze the total cost of locations (pieces)
failureData$Total.actual.costs <- as.numeric(as.character(failureData$Total.actual.costs))
costVsLocation <- aggregate(Total.actual.costs ~ Functional.Location, failureData, sum)
names(costVsLocation)[1] <- "Location"
names(costVsLocation)[2] <- "Cost"
costVsLocation$"Percentage%" <- costVsLocation$Cost/sum(costVsLocation$Cost)*100
costVsLocation <- costVsLocation[order(-costVsLocation[,2]),]
###################################################### Merge the tables include Frequency and Cost by Location
mergedTable <- merge(Location_table,costVsLocation, by.x = "Location", by.y = "Location")
#dim(mergedTable);dim(Location_table);dim(costVsLocation)  # check
mergedTable2 <- mergedTable[mergedTable$Cost > 0,]  # remove some useless data
mergedTable2 <- mergedTable2[mergedTable2$Freq >= 1,]
mergedTable2 <- mergedTable2[order(-mergedTable2[,2]),]
###################################################### Analyze the per cost of failures in some location
perCostTable <- cbind(mergedTable2,percost = mergedTable2$Cost/mergedTable2$Freq)
perCostTable <- perCostTable[order(-perCostTable[,6]),]
###################################################### Choose Order.Type that we need
OrderTpyeList <- c("BKDN","IHA","PROA")
failureDataE<- failureData[failureData$Order.Type %in% OrderTpyeList,]
###################################################### Analyze the frequency of locations (pieces)
LocationE <- getlocation(failureDataE)
Location_tableE <- as.data.frame(table(LocationE))
Location_tableE$"Percentage%" <- Location_tableE$Freq/sum(Location_tableE$Freq)*100
Location_tableE <- Location_tableE[order(-Location_tableE[,2]),]
names(Location_tableE)[1] <- "Location"
###################################################### Analyze the total cost of locations (pieces)
failureDataE$Total.actual.costs <- as.numeric(as.character(failureDataE$Total.actual.costs))
costVsLocationE <- aggregate(Total.actual.costs ~ Functional.Location, failureDataE, sum)
names(costVsLocationE)[1] <- "Location"
names(costVsLocationE)[2] <- "Cost"
costVsLocationE$"Percentage%" <- costVsLocationE$Cost/sum(costVsLocationE$Cost)*100
costVsLocationE <- costVsLocationE[order(-costVsLocationE[,2]),]
###################################################### Merge the tables include Frequency and Cost by Location
mergedTableE <- merge(Location_tableE,costVsLocationE, by.x = "Location", by.y = "Location")
#dim(mergedTableE);dim(Location_tableE);dim(costVsLocationE)  # check
mergedTableE2 <- mergedTableE[mergedTableE$Cost > 0,]  # remove some useless data
mergedTableE2 <- mergedTableE2[mergedTableE2$Freq >= 1,]
mergedTableE2 <- mergedTableE2[order(-mergedTableE2[,2]),]
###################################################### Analyze the per cost of failures in some location
perCostTableE <- cbind(mergedTableE2,percost = mergedTableE2$Cost/mergedTableE2$Freq)
perCostTableE <- perCostTableE[order(-perCostTableE[,6]),]
LocationE
Location_tableE
head(Location_tableE)
setwd("/home/creatrol/ws/R/WackerProject")
list.of.packages <- c("xlsx", "stringr", "ggplot2", "lattice", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
startDate <- as.Date("2008-08-04")
ap <- read.xlsx2("testAP7137.xlsx",1)
class(ap$PREV)
for(c in 2:(ncol(ap)-1)){
ap[,c] <- as.numeric(as.character(ap[,c]))
}
summary(ap)
setwd("/home/creatrol/ws/R/WackerProject")
list.of.packages <- c("xlsx", "stringr", "ggplot2", "lattice", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
startDate <- as.Date("2008-08-04")
ap <- read.xlsx2("testAP7137.xlsx",1)
class(ap$PREV)
for(c in 2:(ncol(ap)-1)){
ap[,c] <- as.numeric(as.character(ap[,c]))
}
summary(ap)
topNode <- ap
# plot failure
GetResult <- function(data, Objective, divider){
if (length(unique(data[,names(data) == Objective])) <= 5){
Plot <- ggplot(data, aes_string(Objective, fill="failure")) + geom_bar() +
labs(y = "count of weeks")
Plot <- Plot + geom_vline(aes(xintercept = divider+0.5), color = "grey20", size = 2, linetype = 2)
}else{
Plot <- ggplot(data, aes_string(Objective, fill="failure")) +
geom_histogram(binwidth = max(data[,names(data) == Objective], na.rm = T) / 100) +
labs(y = "count of weeks")
Plot <- Plot + geom_vline(aes(xintercept = divider+0.5), color = "grey20", size = 2, linetype = 2)
}
numAll <- nrow(data)
dataX <- data[data[,names(data) == Objective] <= divider,]
dataY <- data[data[,names(data) == Objective] > divider & !is.na(data[,names(data) == Objective]),]
numX <- nrow(dataX)
numY <- nrow(dataY)
data1 <- data[data$failure == 1,]
num1 <- nrow(data1)
Fre1InAll <- num1 / numAll
num1InX <- nrow(data1[data1[,names(data1) == Objective] <= divider,])
num1InY <- nrow(data1[data1[,names(data1) == Objective] > divider & !is.na(data1[,names(data1) == Objective]),])
data0 <- data[data$failure == 0,]
num0 <- nrow(data0)
num0InX <- nrow(data0[data0[,names(data0) == Objective] <= divider,])
num0InY <- nrow(data0[data0[,names(data0) == Objective] > divider & !is.na(data0[,names(data0) == Objective] > divider),])
Fre1InXOverAll1 <- num1InX / num1
Fre1InYOverAll1 <- num1InY / num1
Fre1InX <- num1InX / numX
Fre1InY <- num1InY / numY
if(numX > numY) {nextNode <- dataX}
else {nextNode <- dataY}
#resultList <- list("List", "Plot", "Fre1InXOverAll1", "Fre1InYOverAll1", "Fre1InAll",
#                   "Fre1InX", "Fre1InY", "nextNode")
text <- paste("Allnum: ", as.character(numAll),  ", All1: ", as.character(num1),", numX : ", as.character(numX),
", numY: ", as.character(numY), ", num1InX: ", as.character(num1InX), ", num1InY: ", as.character(num1InY))
result <- list( Plot, text, nextNode)
return(result)
}
#if(F){
PreWT04result <- GetResult(topNode,"PreWT04",0)
PreWT04result[[2]]
secondNode <- PreWT04result[[3]]
V192In4Wresult <- GetResult(secondNode,"V192In4W",0)
V192In4Wresult[[2]]
#V192In4Wresult[[1]]
thirdNode <- V192In4Wresult[[3]]
VAMresult <- GetResult(thirdNode,"VAM",1237.33)
VAMresult[[2]]
#VAMresult[[1]]
forthNode <- VAMresult[[3]]
EP4200In3Wresult <- GetResult(forthNode,"EP9200In3W",0)
EP4200In3Wresult[[2]]
#}
summary(forthNode)
summary(secondNode)
summary(thirdNode)
setwd("/home/creatrol/ws/R/WackerProject")
list.of.packages <- c("xlsx", "stringr", "ggplot2", "lattice", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
startDate <- as.Date("2008-08-04")
ap <- read.xlsx2("testAP7137.xlsx",1)
class(ap$PREV)
for(c in 2:(ncol(ap)-1)){
ap[,c] <- as.numeric(as.character(ap[,c]))
}
summary(ap)
topNode <- ap
# plot failure
GetResult <- function(data, Objective, divider){
if (length(unique(data[,names(data) == Objective])) <= 5){
Plot <- ggplot(data, aes_string(Objective, fill="failure")) + geom_bar() +
labs(y = "count of weeks")
Plot <- Plot + geom_vline(aes(xintercept = divider+0.5), color = "grey20", size = 2, linetype = 2)
}else{
Plot <- ggplot(data, aes_string(Objective, fill="failure")) +
geom_histogram(binwidth = max(data[,names(data) == Objective], na.rm = T) / 100) +
labs(y = "count of weeks")
Plot <- Plot + geom_vline(aes(xintercept = divider+0.5), color = "grey20", size = 2, linetype = 2)
}
numAll <- nrow(data)
dataX <- data[data[,names(data) == Objective] <= divider & !is.na(data[,names(data) == Objective]),]
dataY <- data[data[,names(data) == Objective] > divider & !is.na(data[,names(data) == Objective]),]
numX <- nrow(dataX)
numY <- nrow(dataY)
data1 <- data[data$failure == 1,]
num1 <- nrow(data1)
Fre1InAll <- num1 / numAll
num1InX <- nrow(data1[data1[,names(data1) == Objective] <= divider & !is.na(data[,names(data1) == Objective]),])
num1InY <- nrow(data1[data1[,names(data1) == Objective] > divider & !is.na(data1[,names(data1) == Objective]),])
data0 <- data[data$failure == 0,]
num0 <- nrow(data0)
num0InX <- nrow(data0[data0[,names(data0) == Objective] <= divider,])
num0InY <- nrow(data0[data0[,names(data0) == Objective] > divider & !is.na(data0[,names(data0) == Objective] > divider),])
Fre1InXOverAll1 <- num1InX / num1
Fre1InYOverAll1 <- num1InY / num1
Fre1InX <- num1InX / numX
Fre1InY <- num1InY / numY
if(numX > numY) {nextNode <- dataX}
else {nextNode <- dataY}
#resultList <- list("List", "Plot", "Fre1InXOverAll1", "Fre1InYOverAll1", "Fre1InAll",
#                   "Fre1InX", "Fre1InY", "nextNode")
text <- paste("Allnum: ", as.character(numAll),  ", All1: ", as.character(num1),", numX : ", as.character(numX),
", numY: ", as.character(numY), ", num1InX: ", as.character(num1InX), ", num1InY: ", as.character(num1InY))
result <- list( Plot, text, nextNode)
return(result)
}
#if(F){
PreWT04result <- GetResult(topNode,"PreWT04",0)
PreWT04result[[2]]
secondNode <- PreWT04result[[3]]
V192In4Wresult <- GetResult(secondNode,"V192In4W",0)
V192In4Wresult[[2]]
#V192In4Wresult[[1]]
thirdNode <- V192In4Wresult[[3]]
VAMresult <- GetResult(thirdNode,"VAM",1237.33)
VAMresult[[2]]
#VAMresult[[1]]
forthNode <- VAMresult[[3]]
EP4200In3Wresult <- GetResult(forthNode,"EP9200In3W",0)
EP4200In3Wresult[[2]]
#}
setwd("/home/creatrol/ws/R/WackerProject")
list.of.packages <- c("xlsx", "stringr", "ggplot2", "lattice", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
startDate <- as.Date("2008-08-04")
ap <- read.xlsx2("testAP7137.xlsx",1)
class(ap$PREV)
for(c in 2:(ncol(ap)-1)){
ap[,c] <- as.numeric(as.character(ap[,c]))
}
summary(ap)
topNode <- ap
# plot failure
GetResult <- function(data, Objective, divider){
if (length(unique(data[,names(data) == Objective])) <= 5){
Plot <- ggplot(data, aes_string(Objective, fill="failure")) + geom_bar() +
labs(y = "count of weeks")
Plot <- Plot + geom_vline(aes(xintercept = divider+0.5), color = "grey20", size = 2, linetype = 2)
}else{
Plot <- ggplot(data, aes_string(Objective, fill="failure")) +
geom_histogram(binwidth = max(data[,names(data) == Objective], na.rm = T) / 100) +
labs(y = "count of weeks")
Plot <- Plot + geom_vline(aes(xintercept = divider+0.5), color = "grey20", size = 2, linetype = 2)
}
numAll <- nrow(data)
dataX <- data[data[,names(data) == Objective] <= divider & !is.na(data[,names(data) == Objective]),]
dataY <- data[data[,names(data) == Objective] > divider & !is.na(data[,names(data) == Objective]),]
numX <- nrow(dataX)
numY <- nrow(dataY)
data1 <- data[data$failure == 1,]
num1 <- nrow(data1)
Fre1InAll <- num1 / numAll
num1InX <- nrow(data1[data1[,names(data1) == Objective] <= divider & !is.na(data1[,names(data1) == Objective]),])
num1InY <- nrow(data1[data1[,names(data1) == Objective] > divider & !is.na(data1[,names(data1) == Objective]),])
data0 <- data[data$failure == 0,]
num0 <- nrow(data0)
num0InX <- nrow(data0[data0[,names(data0) == Objective] <= divider,])
num0InY <- nrow(data0[data0[,names(data0) == Objective] > divider & !is.na(data0[,names(data0) == Objective] > divider),])
Fre1InXOverAll1 <- num1InX / num1
Fre1InYOverAll1 <- num1InY / num1
Fre1InX <- num1InX / numX
Fre1InY <- num1InY / numY
if(numX > numY) {nextNode <- dataX}
else {nextNode <- dataY}
#resultList <- list("List", "Plot", "Fre1InXOverAll1", "Fre1InYOverAll1", "Fre1InAll",
#                   "Fre1InX", "Fre1InY", "nextNode")
text <- paste("Allnum: ", as.character(numAll),  ", All1: ", as.character(num1),", numX : ", as.character(numX),
", numY: ", as.character(numY), ", num1InX: ", as.character(num1InX), ", num1InY: ", as.character(num1InY))
result <- list( Plot, text, nextNode)
return(result)
}
#if(F){
PreWT04result <- GetResult(topNode,"PreWT04",0)
PreWT04result[[2]]
secondNode <- PreWT04result[[3]]
V192In4Wresult <- GetResult(secondNode,"V192In4W",0)
V192In4Wresult[[2]]
#V192In4Wresult[[1]]
thirdNode <- V192In4Wresult[[3]]
VAMresult <- GetResult(thirdNode,"VAM",1237.33)
VAMresult[[2]]
#VAMresult[[1]]
forthNode <- VAMresult[[3]]
EP4200In3Wresult <- GetResult(forthNode,"EP9200In3W",0)
EP4200In3Wresult[[2]]
#}
setwd("/home/creatrol/ws/R/WackerProject")
list.of.packages <- c("xlsx", "stringr", "ggplot2", "lattice", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
startDate <- as.Date("2008-08-04")
ap <- read.xlsx2("testAP7137.xlsx",1)
class(ap$PREV)
for(c in 2:(ncol(ap)-1)){
ap[,c] <- as.numeric(as.character(ap[,c]))
}
summary(ap)
topNode <- ap
# plot failure
GetResult <- function(data, Objective, divider){
if (length(unique(data[,names(data) == Objective])) <= 5){
Plot <- ggplot(data, aes_string(Objective, fill="failure")) + geom_bar() +
labs(y = "count of weeks")
Plot <- Plot + geom_vline(aes(xintercept = divider+0.5), color = "grey20", size = 2, linetype = 2)
}else{
Plot <- ggplot(data, aes_string(Objective, fill="failure")) +
geom_histogram(binwidth = max(data[,names(data) == Objective], na.rm = T) / 100) +
labs(y = "count of weeks")
Plot <- Plot + geom_vline(aes(xintercept = divider+0.5), color = "grey20", size = 2, linetype = 2)
}
numAll <- nrow(data)
dataX <- data[data[,names(data) == Objective] <= divider & !is.na(data[,names(data) == Objective]),]
dataY <- data[data[,names(data) == Objective] > divider,]
numX <- nrow(dataX)
numY <- nrow(dataY)
data1 <- data[data$failure == 1,]
num1 <- nrow(data1)
Fre1InAll <- num1 / numAll
num1InX <- nrow(data1[data1[,names(data1) == Objective] <= divider & !is.na(data1[,names(data1) == Objective]),])
num1InY <- nrow(data1[data1[,names(data1) == Objective] > divider,])
data0 <- data[data$failure == 0,]
num0 <- nrow(data0)
num0InX <- nrow(data0[data0[,names(data0) == Objective] <= divider,])
num0InY <- nrow(data0[data0[,names(data0) == Objective] > divider,])
Fre1InXOverAll1 <- num1InX / num1
Fre1InYOverAll1 <- num1InY / num1
Fre1InX <- num1InX / numX
Fre1InY <- num1InY / numY
if(numX > numY) {nextNode <- dataX}
else {nextNode <- dataY}
#resultList <- list("List", "Plot", "Fre1InXOverAll1", "Fre1InYOverAll1", "Fre1InAll",
#                   "Fre1InX", "Fre1InY", "nextNode")
text <- paste("Allnum: ", as.character(numAll),  ", All1: ", as.character(num1),", numX : ", as.character(numX),
", numY: ", as.character(numY), ", num1InX: ", as.character(num1InX), ", num1InY: ", as.character(num1InY))
result <- list( Plot, text, nextNode)
return(result)
}
#if(F){
PreWT04result <- GetResult(topNode,"PreWT04",0)
PreWT04result[[2]]
secondNode <- PreWT04result[[3]]
V192In4Wresult <- GetResult(secondNode,"V192In4W",0)
V192In4Wresult[[2]]
#V192In4Wresult[[1]]
thirdNode <- V192In4Wresult[[3]]
VAMresult <- GetResult(thirdNode,"VAM",1237.33)
VAMresult[[2]]
#VAMresult[[1]]
forthNode <- VAMresult[[3]]
EP4200In3Wresult <- GetResult(forthNode,"EP9200In3W",0)
EP4200In3Wresult[[2]]
#}
V410result <- GetResult(topNode, "V410",0)
V410result[[2]]
secondNode <- V410result[[3]]
TVARresult <- GetResult(secondNode, "TVAR",0)
TVARresult[[2]]
TVARresult <- GetResult(secondNode, "TVAR",6.64)
TVARresult[[2]]
V4500In2Wresult <- GetResult(topNode, "V4500In2W",1)
secondNode <- V4500In2Wresult[[3]]
AllCleanIn2Wresult <- GetResult(secondNode, "AllCleanIn2W",0)
thirdNode <- AllCleanIn2Wresult[[3]]
PREwt04result <- GetResult(thirdNode,"PreWT04",0)
PREwt04result[[2]]
forthNode <- PREwt04result[[3]]
EP4200In4Wresult <- GetResult(forthNode,"EP9200In4W",0)
fifthNode <- EP4200In4Wresult[[3]]
V192result <- GetResult(fifthNode, "V192", 0)
V192result[[2]]
realRaw <- read.xlsx2("shit.xlsx",3)
# input data
setwd("/home/creatrol/ws/R/Susan")
list.of.packages <- c("xlsx", "stringr", "ggplot2", "lattice", "dplyr","gtable", "grid")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
options(dplyr.width = Inf)
realRaw <- read.xlsx2("shit.xlsx",3)
names(realRaw)
atable <- select(realRaw, Job, Operation, Transaction.Date.Started, Transaction.Date.Ended, Work.Center,
Actual.Labor.Hrs, Actual.Setup.Hrs, Actual.Machine.Hrs)
atable <- select(realRaw, Job, Operation, Transaction.Date.Started, Transaction.Date.Ended, Work.Center,
Actual.Labor.Hrs, Actual.Setup.Hrs)
# input data
setwd("/home/creatrol/ws/R/Susan")
list.of.packages <- c("xlsx", "stringr", "ggplot2", "lattice", "dplyr","gtable", "grid")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
options(dplyr.width = Inf)
# Data Preparation
realRaw <- read.xlsx2("shit.xlsx",3)
### names(realRaw)
atable <- select(realRaw, Job, Operation, Transaction.Date.Started, Transaction.Date.Ended, Work.Center,
Actual.Labor.Hrs, Actual.Setup.Hrs, Actual.Machine.Hrs)
head(select(realRaw, Job))
library(dplyr)
head(select(realRaw, Job))
select(realRaw, Job)
head(select(realRaw, 1))
class(realRaw)
setwd("/home/creatrol/ws/R/Tutorials")
chicago <- readRDS("chicago.rds")
head(select(chicago,city:dptp))
library("knitr")
install.packages("kernlab")
install.packages("ISLR")
install.packages("gridExtra")
install.packages("RANN")
install.packages("ElemStatLearn")
install.packages("klaR")
install.packages("quantmod")
install.packages("forecast")
install.packages("xts")
